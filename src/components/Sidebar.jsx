import React, { useState } from 'react';

const modules = [
  { key: 'about', label: 'üë®‚Äçüíª About Me', icon: 'üë®‚Äçüíª' },
  { key: 'editor', label: 'üíª Code Editor', icon: 'üíª' },
  { key: 'gallery', label: 'üé® UI Gallery', icon: 'üé®' },
  { key: 'animation', label: '‚ö° Animation Zone', icon: '‚ö°' },
  { key: 'transition', label: 'üîÑ Transition Playground', icon: 'üîÑ' },
  { key: 'responsive', label: 'üì± Responsive Tester', icon: 'üì±' },
  { key: 'pseudo', label: 'üé≠ Pseudo-Classes', icon: 'üé≠' },
  { key: 'typography', label: 'üìù Typography', icon: 'üìù' },
  { key: 'color', label: 'üé® Colors & Gradients', icon: 'üé®' },
  { key: 'art', label: 'üñºÔ∏è CSS Art', icon: 'üñºÔ∏è' },
  { key: 'utility', label: 'üõ†Ô∏è Utility Guide', icon: 'üõ†Ô∏è' },
  { key: 'practice', label: 'üèãÔ∏è Practice Zone', icon: 'üèãÔ∏è' },
  { key: 'tools', label: 'üîß Tools', icon: 'üîß' },
  // --- Custom Tools and Learning Modules ---
  { key: 'quiz', label: '‚ùì Quiz', icon: '‚ùì' },
  { key: 'daily', label: 'üìÖ Daily Challenge', icon: 'üìÖ' },
  { key: 'portfolio', label: 'üìÅ Portfolio Templates', icon: 'üìÅ' },
  { key: 'beginner', label: 'üå± Beginner Tasks', icon: 'üå±' },
  { key: 'palette', label: 'üé® Color Palette', icon: 'üé®' },
  { key: 'gradient', label: 'üåà Gradient Builder', icon: 'üåà' },
  { key: 'tw2css', label: 'üîÑ Tailwind‚ÜíCSS', icon: 'üîÑ' },
  { key: 'download', label: 'üì¶ Download ZIP', icon: 'üì¶' },
  { key: 'codepen', label: 'üì§ Export to CodePen', icon: 'üì§' },
  { key: 'compare', label: '‚öñÔ∏è Component Comparison', icon: '‚öñÔ∏è' },
];

const Sidebar = ({ setModule, module }) => {
  const [isCollapsed, setIsCollapsed] = useState(false);

  return (
    <aside className={`${isCollapsed ? 'w-16' : 'w-64'} min-h-screen bg-white dark:bg-gray-900 border-r border-blue-100 dark:border-gray-800 p-4 flex flex-col gap-2 transition-all duration-300 relative`}>
      {/* Toggle Button */}
      <button
        onClick={() => setIsCollapsed(!isCollapsed)}
        className="absolute -right-3 top-6 bg-blue-600 text-white p-1 rounded-full shadow-lg hover:bg-blue-700 transition-colors z-10"
        aria-label={isCollapsed ? 'Expand sidebar' : 'Collapse sidebar'}
      >
        {isCollapsed ? '‚Üí' : '‚Üê'}
      </button>

      {/* Header */}
      <div className="mb-6">
        {!isCollapsed ? (
          <div>
            <h1 className="text-xl font-bold text-blue-700 dark:text-blue-200 mb-2">üé® Graphicshop</h1>
            <p className="text-xs text-gray-600 dark:text-gray-400">CSS Lab & Learning Platform</p>
          </div>
        ) : (
          <div className="text-center">
            <div className="text-2xl">üé®</div>
          </div>
        )}
      </div>

      {/* Navigation */}
      <nav className="flex-1 space-y-1">
        {modules.map(m => (
          <button
            key={m.key}
            className={`w-full text-left px-3 py-2.5 rounded-lg font-medium transition-all duration-200 group ${
              module === m.key 
                ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-200 shadow-sm' 
                : 'hover:bg-blue-50 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-200 hover:text-blue-600 dark:hover:text-blue-300'
            }`}
            onClick={() => setModule(m.key)}
            title={isCollapsed ? m.label : undefined}
          >
            <div className="flex items-center gap-3">
              <span className="text-lg">{m.icon}</span>
              {!isCollapsed && (
                <span className="truncate">{m.label.replace(/^[^\s]+\s/, '')}</span>
              )}
            </div>
          </button>
        ))}
      </nav>

      {/* Footer */}
      {!isCollapsed && (
        <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
          <div className="text-xs text-gray-500 dark:text-gray-400 text-center">
            <div className="mb-2">Made with ‚ù§Ô∏è</div>
            <div>by graphicshop786</div>
          </div>
        </div>
      )}
    </aside>
  );
};

export default Sidebar;
